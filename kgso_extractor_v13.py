# -*- coding: utf-8 -*-
"""KGSO_EXTRACTOR_V13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S8DiechlJsGGjwHu5D7N49FIFJsytPaW
"""

# !pip install requests
# !pip install gzip
# !pip install json

import gzip
import requests
from math import radians, sin, cos, sqrt, atan2
import json
import csv

# Coordinates of KGSO (Piedmont Triad International Airport)
kgso_lat = 36.09775
kgso_lon = -79.9373

# Define CSV filename and path
csv_path = '/content/drive/MyDrive/ATC_Transponder_Data/readsb-hist'

csv_filename = f"{csv_path}/aircraft_near_KGSO.csv"

# Initialize CSV file and write header
csv_header = ["Dist to GSO", "Time", "Hex", "DS Type", "Flight #", "Aircraft_Reg", "Aircraft_Type", "Altitude Baro", "Altitude Geom", "Ground Speed",
              "Track", "Baro Rate", "Squawk", "Emergency", "Category", "Latitude", "Longitude",
              "NIC Navigation Integrity Category", "RC Navigation Accuracy Category", "Seen Position", "Version", "NIC Baro", "NAC P", "NAC V", "SIL Source Integrity Level ", "SIL Type",
              "GVA", "SDA System Design Assurance", "Alert", "SPI", "MLAT", "TISB", "Messages", "Seen", "RSSI"]

# Open CSV file and write header
with open(csv_filename, mode='w', newline='', encoding='utf-8') as csv_file:
    csv_writer = csv.writer(csv_file)
    csv_writer.writerow(csv_header)

    # Function to calculate distance between two points using Haversine formula
    def calculate_distance(lat1, lon1, lat2, lon2):
        # Convert latitude and longitude from degrees to radians
        lat1_rad, lon1_rad, lat2_rad, lon2_rad = map(radians, [lat1, lon1, lat2, lon2])

        # Earth radius in nautical miles
        R = 3440.065

        # Calculate differences
        dlon = lon2_rad - lon1_rad
        dlat = lat2_rad - lat1_rad

        # Haversine formula
        a = sin(dlat / 2)**2 + cos(lat1_rad) * cos(lat2_rad) * sin(dlon / 2)**2
        c = 2 * atan2(sqrt(a), sqrt(1 - a))
        distance = R * c

        return distance

    # Function to fetch compressed data, process each line as plain text
    def fetch_and_search(url, csv_writer):
        try:
            response = requests.get(url, stream=True)
            response.raise_for_status()

            with gzip.GzipFile(fileobj=response.raw) as gz_file:
                for line in gz_file:
                    line_str = line.decode('utf-8').strip()

                    # Check if line contains latitude and longitude
                    if '"lat"' in line_str and '"lon"' in line_str:
                        # Extract lat and lon using simple string operations
                        lat_start_idx = line_str.find('"lat"') + len('"lat":')
                        lat_end_idx = line_str.find(',', lat_start_idx)
                        lon_start_idx = line_str.find('"lon"') + len('"lon":')
                        lon_end_idx = line_str.find(',', lon_start_idx)

                        aircraft_lat = float(line_str[lat_start_idx:lat_end_idx].strip())
                        aircraft_lon = float(line_str[lon_start_idx:lon_end_idx].strip())

                        distance_to_kgso = calculate_distance(aircraft_lat, aircraft_lon, kgso_lat, kgso_lon)

                        # Threshold distance (10 nautical miles) to determine "near" KGSO
                        threshold_distance_nm = 10

                        if distance_to_kgso <= threshold_distance_nm:
                            # Extract JSON object within {}
                            json_start_idx = line_str.find('{')
                            json_end_idx = line_str.rfind('}') + 1
                            aircraft_info_str = line_str[json_start_idx:json_end_idx]

                            # Parse JSON object
                            aircraft_info = json.loads(aircraft_info_str)

                            # Write to CSV file
                            time = url.split('/')[-1].split('.')[0]  # Extract time from URL
                            hex_id = aircraft_info.get('hex', '')
                            data_s_type = aircraft_info.get('type', '')
                            flight = aircraft_info.get('flight', '')
                            aircraft_model = aircraft_info.get('r', '')
                            aircraft_type = aircraft_info.get('t', '')
                            altitude_baro = aircraft_info.get('alt_baro', '')
                            altitude_geom = aircraft_info.get('alt_geom', '')
                            ground_speed = aircraft_info.get('gs', '')
                            track = aircraft_info.get('track', '')
                            baro_rate = aircraft_info.get('baro_rate', '')
                            squawk = aircraft_info.get('squawk', '')
                            emergency = aircraft_info.get('emergency', '')
                            category = aircraft_info.get('category', '')
                            lat = aircraft_info.get('lat', '')
                            lon = aircraft_info.get('lon', '')
                            nic = aircraft_info.get('nic', '')
                            rc = aircraft_info.get('rc', '')
                            seen_pos = aircraft_info.get('seen_pos', '')
                            version = aircraft_info.get('version', '')
                            nic_baro = aircraft_info.get('nic_baro', '')
                            nac_p = aircraft_info.get('nac_p', '')
                            nac_v = aircraft_info.get('nac_v', '')
                            sil = aircraft_info.get('sil', '')
                            sil_type = aircraft_info.get('sil_type', '')
                            gva = aircraft_info.get('gva', '')
                            sda = aircraft_info.get('sda', '')
                            alert = aircraft_info.get('alert', '')
                            spi = aircraft_info.get('spi', '')
                            mlat = aircraft_info.get('mlat', '')
                            tisb = aircraft_info.get('tisb', '')
                            messages = aircraft_info.get('messages', '')
                            seen = aircraft_info.get('seen', '')
                            rssi = aircraft_info.get('rssi', '')

                            # Append data to CSV
                            csv_writer.writerow([distance_to_kgso, time, hex_id, data_s_type, flight, aircraft_model, aircraft_type,
                                                 altitude_baro, altitude_geom, ground_speed, track,
                                                 baro_rate, squawk, emergency, category, lat, lon,
                                                 nic, rc, seen_pos, version, nic_baro, nac_p, nac_v,
                                                 sil, sil_type, gva, sda, alert, spi, mlat, tisb,
                                                 messages, seen, rssi])

                            # Print information
                            # print(f"The aircraft with hex ID '{hex_id}' is near KGSO.")
                            # print(f"Distance to KGSO: {distance_to_kgso:.2f} nm")
                            # print(f"JSON object for hex ID '{hex_id}':")
                            # print(json.dumps(aircraft_info, indent=4))
                            # print("-" * 40)

        except requests.exceptions.RequestException as e:
            print(f"Failed to fetch data from {url}: {e}")
        except Exception as e:
            print(f"Error processing data: {e}")

    # Iterate through all URLs for June 1, 2024 (000000Z to 235955Z)
    for hour in range(24):
        for minute in range(60):
            for second in range(0, 60, 5):
                time_str = f"{hour:02}{minute:02}{second:02}Z"
                url = f"https://samples.adsbexchange.com/readsb-hist/2024/06/01/{time_str}.json.gz"
                fetch_and_search(url, csv_writer)

# Print completion message
print("CSV file generated successfully:", csv_filename)